# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cat_move_to_target/GetTagPoseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTagPoseRequest(genpy.Message):
  _md5sum = "3ec977bed7560cbca3391cdd90f0db6c"
  _type = "cat_move_to_target/GetTagPoseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 tag_id
"""
  __slots__ = ['tag_id']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tag_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTagPoseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tag_id is None:
        self.tag_id = 0
    else:
      self.tag_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_h.pack(self.tag_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.tag_id,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_h.pack(self.tag_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.tag_id,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cat_move_to_target/GetTagPoseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTagPoseResponse(genpy.Message):
  _md5sum = "f0edf0bfaf19feb00a1c38682a7a58d5"
  _type = "cat_move_to_target/GetTagPoseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pos_x
float64 pos_y
float64 pos_z
float64 ori_x
float64 ori_y
float64 ori_z
float64 ori_w
float64 w_pos_x
float64 w_pos_y
float64 w_pos_z
bool foundtag
int16 tag_id


"""
  __slots__ = ['pos_x','pos_y','pos_z','ori_x','ori_y','ori_z','ori_w','w_pos_x','w_pos_y','w_pos_z','foundtag','tag_id']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_x,pos_y,pos_z,ori_x,ori_y,ori_z,ori_w,w_pos_x,w_pos_y,w_pos_z,foundtag,tag_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTagPoseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.ori_x is None:
        self.ori_x = 0.
      if self.ori_y is None:
        self.ori_y = 0.
      if self.ori_z is None:
        self.ori_z = 0.
      if self.ori_w is None:
        self.ori_w = 0.
      if self.w_pos_x is None:
        self.w_pos_x = 0.
      if self.w_pos_y is None:
        self.w_pos_y = 0.
      if self.w_pos_z is None:
        self.w_pos_z = 0.
      if self.foundtag is None:
        self.foundtag = False
      if self.tag_id is None:
        self.tag_id = 0
    else:
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.ori_x = 0.
      self.ori_y = 0.
      self.ori_z = 0.
      self.ori_w = 0.
      self.w_pos_x = 0.
      self.w_pos_y = 0.
      self.w_pos_z = 0.
      self.foundtag = False
      self.tag_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10dBh.pack(_x.pos_x, _x.pos_y, _x.pos_z, _x.ori_x, _x.ori_y, _x.ori_z, _x.ori_w, _x.w_pos_x, _x.w_pos_y, _x.w_pos_z, _x.foundtag, _x.tag_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 83
      (_x.pos_x, _x.pos_y, _x.pos_z, _x.ori_x, _x.ori_y, _x.ori_z, _x.ori_w, _x.w_pos_x, _x.w_pos_y, _x.w_pos_z, _x.foundtag, _x.tag_id,) = _struct_10dBh.unpack(str[start:end])
      self.foundtag = bool(self.foundtag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10dBh.pack(_x.pos_x, _x.pos_y, _x.pos_z, _x.ori_x, _x.ori_y, _x.ori_z, _x.ori_w, _x.w_pos_x, _x.w_pos_y, _x.w_pos_z, _x.foundtag, _x.tag_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 83
      (_x.pos_x, _x.pos_y, _x.pos_z, _x.ori_x, _x.ori_y, _x.ori_z, _x.ori_w, _x.w_pos_x, _x.w_pos_y, _x.w_pos_z, _x.foundtag, _x.tag_id,) = _struct_10dBh.unpack(str[start:end])
      self.foundtag = bool(self.foundtag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10dBh = struct.Struct("<10dBh")
class GetTagPose(object):
  _type          = 'cat_move_to_target/GetTagPose'
  _md5sum = '9947cf06bd814875243bead8e5c2eb9e'
  _request_class  = GetTagPoseRequest
  _response_class = GetTagPoseResponse
