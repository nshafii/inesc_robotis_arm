# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cat_move_to_target/GetJointValuesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetJointValuesRequest(genpy.Message):
  _md5sum = "956284a21cdb84cf2ea6f34e4787d409"
  _type = "cat_move_to_target/GetJointValuesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pos_x
float64 pos_y
float64 pos_z
float64 zyx_angle_z
float64 zyx_angle_y
float64 zyx_angle_x
bool hardcoded_wrist
"""
  __slots__ = ['pos_x','pos_y','pos_z','zyx_angle_z','zyx_angle_y','zyx_angle_x','hardcoded_wrist']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_x,pos_y,pos_z,zyx_angle_z,zyx_angle_y,zyx_angle_x,hardcoded_wrist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetJointValuesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.zyx_angle_z is None:
        self.zyx_angle_z = 0.
      if self.zyx_angle_y is None:
        self.zyx_angle_y = 0.
      if self.zyx_angle_x is None:
        self.zyx_angle_x = 0.
      if self.hardcoded_wrist is None:
        self.hardcoded_wrist = False
    else:
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.zyx_angle_z = 0.
      self.zyx_angle_y = 0.
      self.zyx_angle_x = 0.
      self.hardcoded_wrist = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6dB.pack(_x.pos_x, _x.pos_y, _x.pos_z, _x.zyx_angle_z, _x.zyx_angle_y, _x.zyx_angle_x, _x.hardcoded_wrist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.pos_x, _x.pos_y, _x.pos_z, _x.zyx_angle_z, _x.zyx_angle_y, _x.zyx_angle_x, _x.hardcoded_wrist,) = _struct_6dB.unpack(str[start:end])
      self.hardcoded_wrist = bool(self.hardcoded_wrist)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6dB.pack(_x.pos_x, _x.pos_y, _x.pos_z, _x.zyx_angle_z, _x.zyx_angle_y, _x.zyx_angle_x, _x.hardcoded_wrist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.pos_x, _x.pos_y, _x.pos_z, _x.zyx_angle_z, _x.zyx_angle_y, _x.zyx_angle_x, _x.hardcoded_wrist,) = _struct_6dB.unpack(str[start:end])
      self.hardcoded_wrist = bool(self.hardcoded_wrist)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6dB = struct.Struct("<6dB")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cat_move_to_target/GetJointValuesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetJointValuesResponse(genpy.Message):
  _md5sum = "01c16b8753716d52de66552164fe680a"
  _type = "cat_move_to_target/GetJointValuesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 theta1
float64 theta2
float64 theta3
float64 theta4
float64 theta5
float64 theta6

"""
  __slots__ = ['theta1','theta2','theta3','theta4','theta5','theta6']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       theta1,theta2,theta3,theta4,theta5,theta6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetJointValuesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.theta1 is None:
        self.theta1 = 0.
      if self.theta2 is None:
        self.theta2 = 0.
      if self.theta3 is None:
        self.theta3 = 0.
      if self.theta4 is None:
        self.theta4 = 0.
      if self.theta5 is None:
        self.theta5 = 0.
      if self.theta6 is None:
        self.theta6 = 0.
    else:
      self.theta1 = 0.
      self.theta2 = 0.
      self.theta3 = 0.
      self.theta4 = 0.
      self.theta5 = 0.
      self.theta6 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.theta1, _x.theta2, _x.theta3, _x.theta4, _x.theta5, _x.theta6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.theta1, _x.theta2, _x.theta3, _x.theta4, _x.theta5, _x.theta6,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.theta1, _x.theta2, _x.theta3, _x.theta4, _x.theta5, _x.theta6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.theta1, _x.theta2, _x.theta3, _x.theta4, _x.theta5, _x.theta6,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
class GetJointValues(object):
  _type          = 'cat_move_to_target/GetJointValues'
  _md5sum = '7a5da121fb59cc8b0d5a404807350ade'
  _request_class  = GetJointValuesRequest
  _response_class = GetJointValuesResponse
